<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// TODO:
// at the moment the specifications allow to say that:
// - it is always possible to reach a synchronization state
// - once clocks are synchronized, they always can return to a synchronized state
//
// it is not clear how to "bound" the interval in which two clocks can be un-synchronized (given the restrictive syntax of Uppaal specifications);
// we should also see how it scales to a cutoff size and double check the model actually falls in the family of disjunctive timed networks

// SIZE: number of copies in the system
const int SIZE = 7;
// PERIOD: discrete clock period; the clock cycles from 0 till PERIOD-1, than it goes back to 0
const int PERIOD = 3;

// tick: it stores, for each process id, the current clock value
meta int[0,PERIOD] tick[SIZE];

// high: an array storing, for each process id, whether it is currently synchronized with the clock source (high[id] = true) or not (high[id] = false);
//       this array is used to encode the disjunctive guard, since Uppaal does not allow to refer to other process locations
int synched[SIZE]={1,1,1,1,1,1,1};



void inc_tick(int[0,SIZE] id) {
    tick[id] = (tick[id] + 1) % PERIOD;
}

int[0,PERIOD] get_tick(int[0,SIZE] id) {
    return tick[id];
}

void set_tick(int[0,SIZE] id, int[0,PERIOD] value) {
    tick[id] = value;
}


int get_synched(int[0,SIZE] id) {
    return synched[id];
}

void set_synched(int [0,SIZE] id, bool is_synched) {
    synched[id] = is_synched;
}

int num_synched() {
    int i=0, res=0;

    for (i=0; i&lt;SIZE; i++) {
        res = res + synched[i];
    } 

    return res;
}</declaration>
	<template>
		<name>GTPUser</name>
		<parameter>int id</parameter>
		<declaration>// sync_proc: it stores the identify of the process from which it receives a message, or -1 
//int sync_proc = -1;

// ph: it represents the phase of the oscillator; in theory the oscillator should fire when its phase equals 1, but it may be the case that the oscillator 
//     drifts (e.g. it fires too early, or too low); we model this by assuming that the phase is a precise clock (no drifts) but the oscillator may fire
//     when ph == 1, ph &lt; 1, or ph &gt; 1, and react accordingly
clock ph;
clock c_resync;

//meta int[0, PERIOD] tick = 0;

// Open questions:
// 
// 1. number of actual locations is not the visible ones, but we must multiply it by the number of values of high[id] times the values of tick[id]
// 2. we use the array high[sync_id] to check whether the quality of clock of sync_id is better than the one in the local process; this is like saying that we abstract from the metric 
//    for judging the quality of a timestamp, assuming that such metric is able to distinguish (most of the times?) between clocks with good timestamps (i.e. synchronized with the Controller)
//    and clocks with bad timestamps
// 3. 


bool check_exists(int proc_id, int[0,PERIOD] tick, bool synched) {
    int id;
    for (id=0; id&lt;SIZE; id++) {
        if (get_synched(id) == synched and get_tick(id) == tick and id != proc_id) {
            return true;
        }
    }

    return false;
}

bool check_exists_synched(int proc_id, bool synched) {
    int id;
    for (id=0; id&lt;SIZE; id++) {
        if (get_synched(id) == synched and id != proc_id) {
            return true;
        }
    }

    return false;
}</declaration>
		<location id="id0" x="-807" y="93">
		</location>
		<location id="id1" x="-799" y="-51">
		</location>
		<location id="id2" x="246" y="59">
			<name x="236" y="25">L2</name>
			<label kind="invariant" x="263" y="76">ph &lt;= 4</label>
		</location>
		<location id="id3" x="-34" y="51">
			<name x="-44" y="17">L1</name>
			<label kind="invariant" x="-76" y="68">ph &lt;= 4</label>
		</location>
		<location id="id4" x="-382" y="51">
			<name x="-392" y="17">L0</name>
			<label kind="invariant" x="-450" y="59">ph &lt;= 4</label>
		</location>
		<location id="id5" x="204" y="-289">
			<name x="194" y="-323">H2</name>
			<label kind="invariant" x="194" y="-272">ph&lt;=2</label>
		</location>
		<location id="id6" x="-51" y="-289">
			<name x="-61" y="-323">H1</name>
			<label kind="invariant" x="-61" y="-272">ph&lt;=2</label>
		</location>
		<location id="id7" x="-391" y="-289">
			<name x="-401" y="-323">H0</name>
			<label kind="invariant" x="-401" y="-272">ph&lt;=2</label>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id0"/>
			<target ref="id7"/>
			<label kind="guard" x="-789" y="8">check_exists(id,0,true)</label>
			<label kind="assignment" x="-789" y="42">set_tick(id,0),set_synched(id,true), ph := 0</label>
			<nail x="-416" y="-8"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="guard" x="-789" y="4">check_exists(id,1,true)</label>
			<label kind="assignment" x="-789" y="38">set_tick(id, 1), set_synched(id, true),   ph := 0</label>
			<nail x="-195" y="-17"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id5"/>
			<label kind="guard" x="-789" y="16">check_exists(id, 2, true)</label>
			<label kind="assignment" x="-789" y="50">set_tick(id, 2), set_synched(id, true),   ph := 0</label>
			<nail x="-204" y="8"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<nail x="-603" y="102"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<nail x="-620" y="25"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id1"/>
			<nail x="-629" y="-212"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id7"/>
			<nail x="-586" y="-93"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="guard" x="-781" y="-374">check_exists(id,2,true)</label>
			<label kind="assignment" x="-781" y="-340">set_tick(id, 2), set_synched(id, true),ph := 0</label>
			<nail x="-272" y="-629"/>
			<nail x="85" y="-629"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id6"/>
			<label kind="guard" x="-781" y="-357">check_exists(id,1,true)</label>
			<label kind="assignment" x="-781" y="-323">set_tick(id, 1), set_synched(id, true),  ph := 0</label>
			<nail x="-484" y="-595"/>
			<nail x="-93" y="-595"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id7"/>
			<label kind="guard" x="-755" y="-578">check_exists(id,0,true)</label>
			<label kind="assignment" x="-755" y="-544">set_tick(id, 0),  set_synched(id, true),ph:=0</label>
			<nail x="-773" y="-527"/>
			<nail x="-416" y="-561"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id3"/>
			<label kind="guard" x="-373" y="-153">ph &lt; 2 and check_exists_synched(id, true)</label>
			<label kind="assignment" x="-373" y="-119">inc_tick(id), ph := 0, 
set_synched(id, false), c_resync := 0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="85" y="195">ph &gt; 2 and check_exists_synched(id, true)</label>
			<label kind="assignment" x="-25" y="212">inc_tick(id), ph := 0, set_synched(id, false), c_resync := 0</label>
			<nail x="357" y="-229"/>
			<nail x="382" y="238"/>
			<nail x="-365" y="246"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="guard" x="-51" y="-102">ph &gt; 2 and 
check_exists_synched(id, true)</label>
			<label kind="assignment" x="-42" y="-59">inc_tick(id), ph := 0, 
set_synched(id, false), 
c_resync := 0</label>
			<nail x="-34" y="-212"/>
			<nail x="144" y="0"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id3"/>
			<label kind="guard" x="-544" y="-161">ph &gt; 2 and check_exists_synched(id, true)</label>
			<label kind="assignment" x="-408" y="-93">inc_tick(id), ph := 0, 
set_synched(id, false), c_resync := 0</label>
			<nail x="-391" y="-221"/>
			<nail x="-110" y="25"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-313" y="140">ph &gt;= 1</label>
			<label kind="assignment" x="-280" y="153">inc_tick(id), ph := 0, set_synched(id, false)</label>
			<nail x="255" y="170"/>
			<nail x="-331" y="178"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="34" y="34">ph &gt;= 1</label>
			<label kind="assignment" x="34" y="59">inc_tick(id), ph := 0, 
set_synched(id, false)</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-272" y="25">ph &gt;= 1</label>
			<label kind="assignment" x="-280" y="51">inc_tick(id), ph := 0, 
set_synched(id, false)</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="425" y="-153">ph &lt; 2 and check_exists_synched(id, true)</label>
			<label kind="assignment" x="433" y="-127">inc_tick(id), ph := 0, 
set_synched(id, false), 
c_resync := 0</label>
			<nail x="399" y="-263"/>
			<nail x="433" y="255"/>
			<nail x="-391" y="263"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="guard" x="42" y="-178">ph &lt; 2 and check_exists_synched(id, true)</label>
			<label kind="assignment" x="76" y="-153">inc_tick(id), ph := 0, 
set_synched(id, false), c_resync := 0</label>
			<nail x="-8" y="-263"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="guard" x="-289" y="-484">ph == 2</label>
			<label kind="assignment" x="-323" y="-450">inc_tick(id), ph := 0, c_resync := 0, set_synched(id, true)</label>
			<nail x="204" y="-459"/>
			<nail x="-399" y="-459"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-34" y="-357">ph == 2</label>
			<label kind="assignment" x="-34" y="-331">inc_tick(id), ph := 0, c_resync := 0, 
set_synched(id, true)</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-340" y="-348">ph == 2</label>
			<label kind="assignment" x="-348" y="-331">inc_tick(id), ph := 0, c_resync := 0, 
set_synched(id, true)</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

u0 = GTPUser(0);
u1 = GTPUser(1);
u2 = GTPUser(2);
u3 = GTPUser(3);
u4 = GTPUser(4);
u5 = GTPUser(5);
u6 = GTPUser(6);


// List one or more processes to be composed into a system.

system u0, u1, u2, u3,u4,u5,u6;</system>
	<queries>
		<query>
			<formula>get_synched(0) == true --&gt; get_synched(0) == false
			</formula>
			<comment>Phi_4: this does not hold
			</comment>
		</query>
		<query>
			<formula>get_synched(0) == false --&gt; get_synched(0) == true
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>get_synched(0) == true --&gt; get_synched(0) == true
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>get_synched(0) == false --&gt; get_synched(0) == false
			</formula>
			<comment>Phi_5: this does not hold
			</comment>
		</query>
		<query>
			<formula>u0.H0--&gt;u0.H0
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
